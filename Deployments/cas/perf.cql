--	**********************************************************************
--	TIBCO BusinessEvents 6.2.2.044 (2022-06-07)
--	Using arguments :-o /Users/yxu/work/be6/perf-test/cassandra/perf -c /Users/yxu/work/be6/proj2/Books/BooksCas.cdd -s CASSANDRA ./Books.ear 
--	Copyright(c) 2004-2022 TIBCO Software Inc. All rights reserved.
--	**********************************************************************
USE perf;

DROP TABLE IF EXISTS d_Author;
CREATE TABLE IF NOT EXISTS d_Author(birth_date TEXT, edit_logs BLOB, bio TEXT, active_date TEXT, personal_name TEXT, title TEXT, rrf_ BLOB, photos BLOB, time_last_modified_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, time_created_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, links BLOB, wikipedia TEXT, parentid_ BLOB, last_modified FROZEN<TUPLE<TIMESTAMP, TEXT>>, website TEXT, state_ TEXT, created FROZEN<TUPLE<TIMESTAMP, TEXT>>, source_records BLOB, remote_ids BLOB, revision BIGINT, death_date TEXT, alternate_names BLOB, photograph TEXT, entity_type TEXT, fuller_name TEXT, name TEXT, location TEXT, extid TEXT, author_id TEXT, latest_revision BIGINT,  PRIMARY KEY (extid));
DROP TABLE IF EXISTS d_AuthorRemoteId;
CREATE TABLE IF NOT EXISTS d_AuthorRemoteId(time_last_modified_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, state_ TEXT, isni TEXT, time_created_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, extid TEXT, rrf_ BLOB, parentid_ BLOB, wikidata TEXT, viaf TEXT,  PRIMARY KEY (extid));
DROP TABLE IF EXISTS d_AuthorRole;
CREATE TABLE IF NOT EXISTS d_AuthorRole(role TEXT, time_last_modified_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, state_ TEXT, time_created_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, author TEXT, extid TEXT, rrf_ BLOB, parentid_ BLOB,  PRIMARY KEY (extid));
DROP TABLE IF EXISTS d_Book;
CREATE TABLE IF NOT EXISTS d_Book(notes TEXT, number_of_pages BIGINT, edit_logs BLOB, other_titles BLOB, subject_time BLOB, edition_name TEXT, copyright_date TEXT, lccn BLOB, publish_places BLOB, contributions BLOB, time_last_modified_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, by_statement TEXT, publishers BLOB, links BLOB, dewey_decimal_class BLOB, physical_format TEXT, uri_descriptions BLOB, last_modified FROZEN<TUPLE<TIMESTAMP, TEXT>>, ocaid TEXT, state_ TEXT, local_id BLOB, created FROZEN<TUPLE<TIMESTAMP, TEXT>>, weight TEXT, work_title BLOB, revision BIGINT, uris BLOB, subtitle TEXT, extid TEXT, publish_date TEXT, authors BLOB, physical_dimensions TEXT, works BLOB, pagination TEXT, description TEXT, title TEXT, isbn_10 BLOB, rrf_ BLOB, translated_from BLOB, isbn_13 BLOB, translation_of TEXT, publish_country TEXT, time_created_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, subject_place BLOB, genres BLOB, lc_classifications BLOB, parentid_ BLOB, covers BLOB, languages BLOB, identifiers BLOB, subjects BLOB, source_records BLOB, oclc_numbers BLOB, book_id TEXT, url BLOB, first_sentence TEXT, series BLOB, table_of_contents BLOB, latest_revision BIGINT,  PRIMARY KEY (extid));
DROP TABLE IF EXISTS d_BookAuthorXref;
CREATE TABLE IF NOT EXISTS d_BookAuthorXref(book_version BIGINT, time_last_modified_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, state_ TEXT, time_created_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, extid TEXT, book_id TEXT, author_id TEXT, rrf_ BLOB, parentid_ BLOB,  PRIMARY KEY (book_version,book_id,author_id));
DROP TABLE IF EXISTS d_BookIdentifier;
CREATE TABLE IF NOT EXISTS d_BookIdentifier(time_last_modified_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, state_ TEXT, time_created_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, name TEXT, ids BLOB, extid TEXT, rrf_ BLOB, parentid_ BLOB,  PRIMARY KEY (extid));
DROP TABLE IF EXISTS d_Excerpt;
CREATE TABLE IF NOT EXISTS d_Excerpt(time_last_modified_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, state_ TEXT, time_created_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, author TEXT, comment_ TEXT, extid TEXT, excerpt TEXT, rrf_ BLOB, parentid_ BLOB,  PRIMARY KEY (extid));
DROP TABLE IF EXISTS d_Link;
CREATE TABLE IF NOT EXISTS d_Link(time_last_modified_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, state_ TEXT, time_created_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, extid TEXT, title TEXT, rrf_ BLOB, parentid_ BLOB, url TEXT,  PRIMARY KEY (extid));
DROP TABLE IF EXISTS d_AuthorLink;
CREATE TABLE IF NOT EXISTS d_AuthorLink(time_last_modified_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, state_ TEXT, time_created_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, extid TEXT, title TEXT, rrf_ BLOB, parentid_ BLOB, url TEXT,  PRIMARY KEY (extid));
DROP TABLE IF EXISTS d_BookLink;
CREATE TABLE IF NOT EXISTS d_BookLink(time_last_modified_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, state_ TEXT, time_created_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, extid TEXT, title TEXT, rrf_ BLOB, parentid_ BLOB, url TEXT,  PRIMARY KEY (extid));
DROP TABLE IF EXISTS d_WorkLink;
CREATE TABLE IF NOT EXISTS d_WorkLink(time_last_modified_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, state_ TEXT, time_created_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, extid TEXT, title TEXT, rrf_ BLOB, parentid_ BLOB, url TEXT,  PRIMARY KEY (extid));
DROP TABLE IF EXISTS d_TableOfContent;
CREATE TABLE IF NOT EXISTS d_TableOfContent(time_last_modified_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, state_ TEXT, time_created_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, level_ BIGINT, extid TEXT, title TEXT, rrf_ BLOB, parentid_ BLOB,  PRIMARY KEY (extid));
DROP TABLE IF EXISTS d_Work;
CREATE TABLE IF NOT EXISTS d_Work(subject_people BLOB, edit_logs BLOB, description TEXT, title TEXT, rrf_ BLOB, time_last_modified_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, time_created_ FROZEN<TUPLE<TIMESTAMP, TEXT>>, first_publish_date TEXT, links BLOB, lc_classifications BLOB, parentid_ BLOB, last_modified FROZEN<TUPLE<TIMESTAMP, TEXT>>, covers BLOB, work_id TEXT, subject_places BLOB, state_ TEXT, excerpts BLOB, created FROZEN<TUPLE<TIMESTAMP, TEXT>>, subjects BLOB, subject_times BLOB, revision BIGINT, subtitle TEXT, extid TEXT, authors BLOB, latest_revision BIGINT,  PRIMARY KEY (extid));
DROP INDEX IF EXISTS i_d_Author_0;
CREATE INDEX IF NOT EXISTS i_d_Author_0 on d_Author(parentid_);
DROP INDEX IF EXISTS i_d_AuthorRemoteId_0;
CREATE INDEX IF NOT EXISTS i_d_AuthorRemoteId_0 on d_AuthorRemoteId(parentid_);
DROP INDEX IF EXISTS i_d_AuthorRole_0;
CREATE INDEX IF NOT EXISTS i_d_AuthorRole_0 on d_AuthorRole(parentid_);
DROP INDEX IF EXISTS i_d_Book_0;
CREATE INDEX IF NOT EXISTS i_d_Book_0 on d_Book(parentid_);
DROP INDEX IF EXISTS i_d_BookAuthorXref_0;
CREATE INDEX IF NOT EXISTS i_d_BookAuthorXref_0 on d_BookAuthorXref(parentid_);
DROP INDEX IF EXISTS i_d_BookIdentifier_0;
CREATE INDEX IF NOT EXISTS i_d_BookIdentifier_0 on d_BookIdentifier(parentid_);
DROP INDEX IF EXISTS i_d_Excerpt_0;
CREATE INDEX IF NOT EXISTS i_d_Excerpt_0 on d_Excerpt(parentid_);
DROP INDEX IF EXISTS i_d_Link_0;
CREATE INDEX IF NOT EXISTS i_d_Link_0 on d_Link(parentid_);
DROP INDEX IF EXISTS i_d_AuthorLink_0;
CREATE INDEX IF NOT EXISTS i_d_AuthorLink_0 on d_AuthorLink(parentid_);
DROP INDEX IF EXISTS i_d_BookLink_0;
CREATE INDEX IF NOT EXISTS i_d_BookLink_0 on d_BookLink(parentid_);
DROP INDEX IF EXISTS i_d_WorkLink_0;
CREATE INDEX IF NOT EXISTS i_d_WorkLink_0 on d_WorkLink(parentid_);
DROP INDEX IF EXISTS i_d_TableOfContent_0;
CREATE INDEX IF NOT EXISTS i_d_TableOfContent_0 on d_TableOfContent(parentid_);
DROP INDEX IF EXISTS i_d_Work_0;
CREATE INDEX IF NOT EXISTS i_d_Work_0 on d_Work(parentid_);

DROP INDEX IF EXISTS ix_d_Author_revision;
CREATE INDEX IF NOT EXISTS ix_d_Author_revision on d_Author(revision);
DROP INDEX IF EXISTS ix_d_Author_last_modified;
CREATE INDEX IF NOT EXISTS ix_d_Author_last_modified on d_Author(last_modified);
DROP INDEX IF EXISTS ix_d_Book_revision;
CREATE INDEX IF NOT EXISTS ix_d_Book_revision on d_Book(revision);
DROP INDEX IF EXISTS ix_d_Book_last_modified;
CREATE INDEX IF NOT EXISTS ix_d_Book_last_modified on d_Book(last_modified);

TRUNCATE ClassToTable;
INSERT INTO ClassToTable(classname,tablename) values ('be.gen.Concepts.Book','d_Book');
INSERT INTO ClassToTable(classname,tablename) values ('be.gen.Concepts.AuthorRemoteId','d_AuthorRemoteId');
INSERT INTO ClassToTable(classname,tablename) values ('be.gen.Concepts.Excerpt','d_Excerpt');
INSERT INTO ClassToTable(classname,tablename) values ('be.gen.Concepts.AuthorLink','d_AuthorLink');
INSERT INTO ClassToTable(classname,tablename) values ('be.gen.Concepts.AuthorRole','d_AuthorRole');
INSERT INTO ClassToTable(classname,tablename) values ('be.gen.Concepts.WorkLink','d_WorkLink');
INSERT INTO ClassToTable(classname,tablename) values ('be.gen.Concepts.Work','d_Work');
INSERT INTO ClassToTable(classname,tablename) values ('be.gen.Concepts.BookIdentifier','d_BookIdentifier');
INSERT INTO ClassToTable(classname,tablename) values ('be.gen.Concepts.BookAuthorXref','d_BookAuthorXref');
INSERT INTO ClassToTable(classname,tablename) values ('be.gen.Concepts.Link','d_Link');
INSERT INTO ClassToTable(classname,tablename) values ('be.gen.Concepts.BookLink','d_BookLink');
INSERT INTO ClassToTable(classname,tablename) values ('be.gen.Concepts.TableOfContent','d_TableOfContent');
INSERT INTO ClassToTable(classname,tablename) values ('be.gen.Concepts.Author','d_Author');
TRUNCATE BEAliases;
INSERT INTO BEAliases(beName,alias) values ('COLUMN.comment.alias','comment_');
INSERT INTO BEAliases(beName,alias) values ('COLUMN.id$.alias','id_');
INSERT INTO BEAliases(beName,alias) values ('COLUMN.lasttaskexecuted$.alias','lasttaskexecuted_');
INSERT INTO BEAliases(beName,alias) values ('COLUMN.level.alias','level_');
INSERT INTO BEAliases(beName,alias) values ('COLUMN.parentid$.alias','parentid_');
INSERT INTO BEAliases(beName,alias) values ('COLUMN.parentprocess$.alias','parentprocess_');
INSERT INTO BEAliases(beName,alias) values ('COLUMN.pendingeventmap$.alias','pendingeventmap_');
INSERT INTO BEAliases(beName,alias) values ('COLUMN.processstatus$.alias','processstatus_');
INSERT INTO BEAliases(beName,alias) values ('COLUMN.processtemplateversion$.alias','processtemplateversion_');
INSERT INTO BEAliases(beName,alias) values ('COLUMN.rrf$.alias','rrf_');
INSERT INTO BEAliases(beName,alias) values ('COLUMN.state$.alias','state_');
INSERT INTO BEAliases(beName,alias) values ('COLUMN.time_acknowledged$.alias','time_acknowledged_');
INSERT INTO BEAliases(beName,alias) values ('COLUMN.time_created$.alias','time_created_');
INSERT INTO BEAliases(beName,alias) values ('COLUMN.time_last_modified$.alias','time_last_modified_');
INSERT INTO BEAliases(beName,alias) values ('COLUMN.time_sent$.alias','time_sent_');
