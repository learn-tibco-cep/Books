/**
 * @description 
 */
void rulefunction RuleFunctions.Preprocessors.onRevokeConcept {
	attribute {
		validity = ACTION;
	}
	scope {
		Events.RevokeConcept evt;
	}
	body {
		Object logger = Log.getLogger("RuleFunctions.Preprocessors.onRevokeConcept");
		
		String extId = String.format("%s/%d", evt.oid, evt.revision);
		Log.log(logger, "debug", "Revoke concept: %s", extId);

		String conUri = null;
		Concept con;
		
		// verify that evt.oid starts with /authors/, or /works/, or /books/
		int pinx = String.indexOfString(evt.oid, 1, "/");
		if (pinx < 1) {
			Log.log(logger, "warn", "Failed to revoke concept: Invalid object ID %s", evt.oid);
		} else {
			// determine the type of concept to be created
			String prefix = String.substring(evt.oid, 0, pinx+1);
			if (prefix == "/authors") {
				conUri = "/Concepts/Author";
			} else if (prefix == "/works") {
				conUri = "/Concepts/Work";
			} else if (prefix == "/books") {
				conUri = "/Concepts/Book";
			}
		}

		if (conUri == null) {
			Log.log(logger, "warn", "Failed to revoke concept: not supported type %s", evt.oid);
		} else {
			// lock if required
			boolean locked = GlobalValues.SKIP_LOCKS || Cluster.DataGrid.Lock(extId, GlobalValues.LOCK_WAIT_TIMEOUT, GlobalValues.LOCK_LOCAL);
			if (!locked) {
				Log.log(logger, "warn", "Failed to LOCK concept %s for revoke after %d ms", extId, GlobalValues.LOCK_WAIT_TIMEOUT);
			} else {
				// fetch concept
				if (GlobalValues.LOCK_LOCAL) {
					con = Instance.getByExtIdByUri(extId, conUri);
				} else {
					con = Cluster.DataGrid.CacheLoadConceptByExtIdByUri(extId, true, conUri);
				}
			}
		}
								   
		if (con == null) {
			Log.log(logger, "warn", "Concept %s NOT Found for revoke", extId);
			Event.replyEvent(evt, evt);
			Event.consumeEvent(evt);
		}
	}
}